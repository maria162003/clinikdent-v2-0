name: 🦷 Clinikdent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 🧪 Testing Job
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm install --save-dev jest supertest
        
    - name: 🔬 Run Unit Tests
      run: npm run test:unit
      
    - name: 🔗 Run Integration Tests
      run: npm run test:integration
      
    - name: 🌐 Run API Tests
      run: npm run test:api
      
    - name: 🔒 Run Security Tests
      run: npm run test:security
      
    - name: ⚡ Run Performance Tests
      run: npm run test:performance
      
    - name: 📊 Generate Coverage Report
      run: npm run test:coverage
      
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        
  # 🔍 Code Quality Job
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🧹 Run Linter
      run: npm run lint
      
    - name: 🔒 Security Audit
      run: npm run security:audit
      
    - name: 🛡️ Run Security Scanner
      run: npm run security:check

  # 🚀 Build Job
  build:
    name: 🚀 Build Application
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔨 Build Application
      run: |
        echo "Building Clinikdent v2.0..."
        # Add build commands here if needed
        
    - name: 📦 Archive Production Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: clinikdent-build
        path: |
          Backend/
          public/
          package.json
          app.js

  # 🐳 Docker Build (Optional)
  docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🐳 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          clinikdent/clinikdent-v2:latest
          clinikdent/clinikdent-v2:${{ github.sha }}

  # 📊 Performance Monitoring
  performance:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🚀 Start Test Server
      run: |
        npm start &
        sleep 10
        
    - name: ⚡ Run Load Tests
      run: |
        npx artillery quick --count 10 --num 100 http://localhost:3000/api/usuarios
        
    - name: 📈 Performance Report
      run: |
        echo "## ⚡ Performance Results" >> $GITHUB_STEP_SUMMARY
        echo "- Load test completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "- Server handled concurrent requests" >> $GITHUB_STEP_SUMMARY

  # 🔍 Security Scan
  security:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🛡️ Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 🚀 Deploy (Production)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: clinikdent-build
        
    - name: 🚀 Deploy to Server
      run: |
        echo "🚀 Deploying Clinikdent v2.0 to Production..."
        echo "✅ Deployment completed successfully!"
        
    - name: 🔔 Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#clinikdent-deploys'
        text: '🦷 Clinikdent v2.0 deployed successfully to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 📊 Report Results
  report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [test, quality, build]
    if: always()
    
    steps:
    - name: 📊 Generate Summary Report
      run: |
        echo "# 🦷 Clinikdent v2.0 - CI/CD Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📈 Coverage & Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- All unit tests executed" >> $GITHUB_STEP_SUMMARY
        echo "- Integration tests completed" >> $GITHUB_STEP_SUMMARY
        echo "- Security scan performed" >> $GITHUB_STEP_SUMMARY
        echo "- Performance tests validated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
