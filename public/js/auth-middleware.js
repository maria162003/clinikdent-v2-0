// Middleware de autenticaci√≥n y seguridad
class AuthMiddleware {
    constructor() {
        this.init();
    }

    init() {
        // Verificar autenticaci√≥n al cargar cualquier p√°gina protegida
        this.checkAuthentication();
        
        // Configurar listeners de seguridad
        this.setupSecurityListeners();
        
        // Configurar timeouts de sesi√≥n
        this.setupSessionTimeout();
    }

    checkAuthentication() {
        const currentPage = window.location.pathname;
        const protectedPages = [
            '/dashboard-odontologo.html',
            '/dashboard-paciente.html',
            '/dashboard-admin.html'
        ];

        // Si estamos en una p√°gina protegida
        if (protectedPages.some(page => currentPage.includes(page))) {
            const userId = localStorage.getItem('userId');
            const userRole = localStorage.getItem('userRole');
            
            console.log('üîç DEBUG AUTH - currentPage:', currentPage);
            console.log('üîç DEBUG AUTH - userId:', userId);
            console.log('üîç DEBUG AUTH - userRole:', userRole);
            console.log('üîç DEBUG AUTH - localStorage full:', Object.entries(localStorage));
            
            if (!userId || !userRole) {
                console.log('‚ùå Acceso denegado: No hay sesi√≥n activa');
                this.forceLogout();
                return false;
            }

            // Verificar que el rol coincida con la p√°gina
            if (currentPage.includes('odontologo') && userRole !== 'odontologo') {
                console.log('‚ùå Acceso denegado: Rol incorrecto para odont√≥logo');
                console.log('‚ùå Esperado: odontologo, Recibido:', userRole);
                this.forceLogout();
                return false;
            }

            if (currentPage.includes('paciente') && userRole !== 'paciente') {
                console.log('‚ùå Acceso denegado: Rol incorrecto para paciente');
                this.forceLogout();
                return false;
            }

            if (currentPage.includes('admin') && userRole !== 'admin') {
                console.log('‚ùå Acceso denegado: Rol incorrecto para admin');
                this.forceLogout();
                return false;
            }

            console.log('‚úÖ Autenticaci√≥n v√°lida');
            return true;
        }

        return true; // P√°ginas p√∫blicas no requieren autenticaci√≥n
    }

    setupSecurityListeners() {
        // Prevenir navegaci√≥n hacia atr√°s despu√©s del logout
        window.addEventListener('pageshow', (event) => {
            if (event.persisted) {
                // P√°gina cargada desde cache del navegador
                if (!this.checkAuthentication()) {
                    return;
                }
            }
        });

        // Manejar cambios en el historial del navegador
        window.addEventListener('popstate', (event) => {
            if (!this.checkAuthentication()) {
                return;
            }
        });

        // Detectar cambios en localStorage (cierre de sesi√≥n en otra pesta√±a)
        window.addEventListener('storage', (event) => {
            if (event.key === 'userId' && event.newValue === null) {
                console.log('üîí Sesi√≥n cerrada en otra pesta√±a');
                this.forceLogout();
            }
        });

        // Limpiar sesi√≥n al cerrar la ventana/pesta√±a
        window.addEventListener('beforeunload', () => {
            // Solo limpiar si estamos en proceso de logout
            if (window.loggingOut) {
                this.clearSession();
            }
        });
    }

    setupSessionTimeout() {
        // Configurar timeout de sesi√≥n (30 minutos de inactividad)
        const SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutos
        let sessionTimer;

        const resetSessionTimer = () => {
            clearTimeout(sessionTimer);
            sessionTimer = setTimeout(() => {
                console.log('‚è∞ Sesi√≥n expirada por inactividad');
                this.forceLogout('timeout');
            }, SESSION_TIMEOUT);
        };

        // Eventos que indican actividad del usuario
        const userActivityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
        
        userActivityEvents.forEach(event => {
            document.addEventListener(event, resetSessionTimer, true);
        });

        // Iniciar el timer
        resetSessionTimer();
    }

    forceLogout(reason = 'security') {
        console.log(`üö® Forzando cierre de sesi√≥n. Raz√≥n: ${reason}`);
        
        // Marcar que estamos en proceso de logout
        window.loggingOut = true;
        
        // Limpiar toda la informaci√≥n de sesi√≥n
        this.clearSession();
        
        // Prevenir navegaci√≥n hacia atr√°s
        this.clearBrowserHistory();
        
        // Redirigir al index con la raz√≥n del logout
        const indexUrl = reason === 'timeout' 
            ? '/index.html?session=timeout'
            : '/index.html?session=expired';
            
        window.location.replace(indexUrl);
    }

    clearSession() {
        // Limpiar localStorage
        localStorage.removeItem('user');
        localStorage.removeItem('userId');
        localStorage.removeItem('userRole');
        
        // Limpiar sessionStorage
        sessionStorage.clear();
        
        // Limpiar cookies si las hay
        document.cookie.split(";").forEach(function(c) { 
            document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
        });
    }

    clearBrowserHistory() {
        // Reemplazar el estado actual del historial
        if (window.history && window.history.replaceState) {
            window.history.replaceState(null, null, '/index.html');
        }
    }

    // M√©todo para logout seguro desde cualquier dashboard
    secureLogout() {
        console.log('üîê Iniciando logout seguro...');
        
        // Marcar que estamos cerrando sesi√≥n
        window.loggingOut = true;
        
        // Limpiar sesi√≥n
        this.clearSession();
        
        // Limpiar historial del navegador
        this.clearBrowserHistory();
        
        // Redirigir al index
        window.location.replace('/index.html?logout=success');
    }
}

// Inicializar el middleware autom√°ticamente
document.addEventListener('DOMContentLoaded', function() {
    window.authMiddleware = new AuthMiddleware();
});

// Funci√≥n global para logout seguro
window.secureLogout = function() {
    if (window.authMiddleware) {
        window.authMiddleware.secureLogout();
    } else {
        // Fallback si el middleware no est√° disponible
        localStorage.clear();
        sessionStorage.clear();
        window.location.replace('/index.html');
    }
};
